enum Option {
    PUBLIC
    PRIVATE
}

type Cart {
    user: User! @goField(forceResolver: true)
    product: Product! @goField(forceResolver: true)
    quantity: Int!
    notes: String!
}

input NewCart {
    productID: ID!
    quantity: Int!
    notes: String!
}

type Wishlist {
    id: ID!
    name: String!
    user: User! @goField(forceResolver: true)
    option: String!
    notes: String
    wishlistDetails: [WishListDetail!]! @goField(forceResolver: true)
}

type WishListDetail {
    wishlist: Wishlist! @goField(forceResolver: true)
    product: Product! @goField(forceResolver: true)
    quantity: Int!
}

type SaveForLater {
    id: ID!
    user: User! @goField(forceResolver: true)
    product: Product! @goField(forceResolver: true)
}

extend type Query {
    carts: [Cart!]! @auth
    cart(productID: ID!): Cart! @auth
    currentUserWishlist: [Wishlist]! @auth
    wishlists: [Wishlist!]!
    wishlist(wishlistID: ID!): Wishlist!
    saveForLaters: [SaveForLater!]! @auth
    wishlistDetails(wishlistID: ID!): [WishListDetail!]!
}

extend type Mutation {
    createCart(input: NewCart!): Cart! @auth
    updateCart(input: NewCart!): Cart @auth
    deleteCart(productID: ID!): Cart! @auth
    createWishlist(name: String!, option: Option!): Wishlist! @auth
    updateWishlist(
        wishlistID: ID!
        name: String
        option: String
        notes: String
    ): Wishlist! @auth
    deleteWishlist(wishlistID: ID!): Boolean! @auth
    createWishlistDetail(
        wishlistID: ID!
        productID: ID!
        quantity: Int
    ): WishListDetail! @auth
    updateWishlistDetail(
        wishlistID: ID
        productID: ID!
        quantity: Int
    ): WishListDetail! @auth
    deleteWishlistDetail(wishlistID: ID!, productID: ID!): WishListDetail! @auth
    createSaveForLater(productID: ID!): SaveForLater! @auth
    deleteSaveForLater(productID: ID!): Product! @auth
}
