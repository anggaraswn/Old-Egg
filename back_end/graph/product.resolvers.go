package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.24

import (
	"context"
	"fmt"

	"github.com/anggaraswn/gqlgen-todos/database"
	"github.com/anggaraswn/gqlgen-todos/graph/model"
	"github.com/anggaraswn/gqlgen-todos/service"
	"github.com/google/uuid"
	"github.com/vektah/gqlparser/v2/gqlerror"
)

// CreateProduct is the resolver for the createProduct field.
func (r *mutationResolver) CreateProduct(ctx context.Context, input model.NewProduct) (*model.Product, error) {
	// panic(fmt.Errorf("not implemented: CreateProduct - createProduct"))

	db := database.GetDB()
	product := &model.Product{
		ID:              uuid.NewString(),
		Name:            input.Name,
		Images:          input.Images,
		Price:           input.Price,
		Discount:        input.Discount,
		Rating:          0,
		Stock:           input.Stock,
		Description:     input.Description,
		NumberOfReviews: 0,
		NumberBought:    0,
		CategoryID:      input.CategoryID,
		ShopID:          input.ShopID,
		BrandID:         input.BrandID,
	}

	err := db.Create(product).Error

	return product, err
}

// UpdateProduct is the resolver for the updateProduct field.
func (r *mutationResolver) UpdateProduct(ctx context.Context, productID string, input model.NewProduct) (*model.Product, error) {
	// panic(fmt.Errorf("not implemented: UpdateProduct - updateProduct"))
	db := database.GetDB()

	if ctx.Value("auth") == nil {
		return nil, &gqlerror.Error{
			Message: "Invalid Token !",
		}
	}

	userID := ctx.Value("auth").(*service.JwtCustomClaim).ID

	shop := new(model.Shop)

	db.First(shop, "user_id = ?", userID)

	product := new(model.Product)

	if err := db.Where("id = ? AND shop_id = ?", productID, shop.ID).Take(&product).Error; err != nil {
		shop = nil
	}

	product.Name = input.Name
	// product.CategoryID = input.CategoryID
	db.Exec("UPDATE products SET category_id = ? WHERE id = ? AND shop_id = ?", input.CategoryID, productID, shop.ID)
	// product.BrandID = input.BrandID
	db.Exec("UPDATE products SET brand_id = ? WHERE id = ? AND shop_id = ?", input.BrandID, productID, shop.ID)
	product.Images = input.Images
	product.Description = input.Description
	product.Price = input.Price
	product.Stock = input.Stock

	return product, db.Save(product).Error
}

// Category is the resolver for the category field.
func (r *productResolver) Category(ctx context.Context, obj *model.Product) (*model.Category, error) {
	// panic(fmt.Errorf("not implemented: Category - category"))
	db := database.GetDB()

	var category *model.Category

	return category, db.Where("id = ?", obj.CategoryID).Find(&category).Error
}

// Shop is the resolver for the shop field.
func (r *productResolver) Shop(ctx context.Context, obj *model.Product) (*model.Shop, error) {
	// panic(fmt.Errorf("not implemented: Shop - shop"))
	db := database.GetDB()

	var shop *model.Shop

	return shop, db.Where("id = ?", obj.ShopID).Find(&shop).Error
}

// Brand is the resolver for the brand field.
func (r *productResolver) Brand(ctx context.Context, obj *model.Product) (*model.Brand, error) {
	// panic(fmt.Errorf("not implemented: Brand - brand"))
	db := database.GetDB()

	var brand *model.Brand

	return brand, db.Where("id = ?", obj.BrandID).Find(&brand).Error
}

// Reviews is the resolver for the reviews field.
func (r *productResolver) Reviews(ctx context.Context, obj *model.Product) ([]*model.Review, error) {
	panic(fmt.Errorf("not implemented: Reviews - reviews"))
}

// Product is the resolver for the product field.
func (r *queryResolver) Product(ctx context.Context, id string) (*model.Product, error) {
	// panic(fmt.Errorf("not implemented: Product - product"))
	db := database.GetDB()

	product := new(model.Product)

	return product, db.First(product, "id = ?", id).Error
}

// Products is the resolver for the products field.
func (r *queryResolver) Products(ctx context.Context, shopID *string, limit *int, topSold *bool, search *model.SearchProduct) ([]*model.Product, error) {
	// panic(fmt.Errorf("not implemented: Products - products"))
	db := database.GetDB()

	var products []*model.Product

	p := db.Model(products)

	if limit != nil {
		p = p.Limit(*limit)
	}

	if search != nil {
		if search.Keyword != nil {
			p = p.Where("name LIKE ? OR description LIKE ?", "%"+*search.Keyword+"%", "%"+*search.Keyword+"%")
		}
	}

	return products, p.Find(&products).Error
}

// Categories is the resolver for the categories field.
func (r *queryResolver) Categories(ctx context.Context) ([]*model.Category, error) {
	// panic(fmt.Errorf("not implemented: Categories - categories"))
	db := database.GetDB()

	var categories []*model.Category

	return categories, db.Find(&categories).Error
}

// Brands is the resolver for the brands field.
func (r *queryResolver) Brands(ctx context.Context) ([]*model.Brand, error) {
	// panic(fmt.Errorf("not implemented: Brands - brands"))
	db := database.GetDB()

	var brands []*model.Brand

	return brands, db.Find(&brands).Error
}

// Product returns ProductResolver implementation.
func (r *Resolver) Product() ProductResolver { return &productResolver{r} }

type productResolver struct{ *Resolver }

// !!! WARNING !!!
// The code below was going to be deleted when updating resolvers. It has been copied here so you have
// one last chance to move it out of harms way if you want. There are two reasons this happens:
//   - When renaming or deleting a resolver the old code will be put in here. You can safely delete
//     it when you're done.
//   - You have helper methods in this file. Move them out to keep these resolver files clean.
func (r *productResolver) Store(ctx context.Context, obj *model.Product) (*model.Shop, error) {
	panic(fmt.Errorf("not implemented: Store - store"))
}
func (r *productResolver) Image(ctx context.Context, obj *model.Product) (string, error) {
	panic(fmt.Errorf("not implemented: Image - image"))
}
