type Product {
    id: ID!
    name: String!
    images: String!
    price: Float!
    discount: Int!
    rating: Float!
    stock: Int!
    description: String!
    numberOfReviews: Int!
    numberBought: Int!
    numberOfRatings: Int!
    category: Category! @goField(forceResolver: true)
    shop: Shop! @goField(forceResolver: true)
    brand: Brand! @goField(forceResolver: true)
    reviews: [Review!]! @goField(forceResolver: true)
}

input NewProduct {
    name: String!
    categoryID: ID!
    shopID: ID!
    brandID: ID!
    images: String!
    description: String!
    price: Float!
    discount: Int!
    stock: Int!
}

type Category {
    id: ID!
    name: String!
    description: String!
}

input NewCategory {
    name: String!
    description: String!
}

type Brand {
    id: ID!
    name: String!
    image: String!
    description: String!
}

input NewBrand {
    name: String!
    image: String!
    description: String!
}

input SearchProduct {
    keyword: String
    minPrice: Float
    maxPrice: Float
    orderBy: String
    categoryID: String
    discount: Boolean
    highRating: Boolean
}

extend type Query {
    product(id: ID!): Product!
    products(
        shopID: ID
        limit: Int
        topSold: Boolean
        search: SearchProduct
    ): [Product!]!
    categories: [Category!]! @goField(forceResolver: true)
    brands: [Brand!]! @goField(forceResolver: true)
}

extend type Mutation {
    createProduct(input: NewProduct!): Product!
    updateProduct(productID: ID!, input: NewProduct!): Product! @auth
}
