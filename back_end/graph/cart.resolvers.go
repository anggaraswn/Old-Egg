package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.24

import (
	"context"
	"fmt"

	"github.com/anggaraswn/gqlgen-todos/database"
	"github.com/anggaraswn/gqlgen-todos/graph/model"
	"github.com/anggaraswn/gqlgen-todos/service"
	"github.com/google/uuid"
	"github.com/vektah/gqlparser/v2/gqlerror"
)

// User is the resolver for the user field.
func (r *cartResolver) User(ctx context.Context, obj *model.Cart) (*model.User, error) {
	// panic(fmt.Errorf("not implemented: User - user"))
	db := database.GetDB();

	user:= new(model.User);

	return user, db.First(user, "id = ?", obj.UserID).Error
}

// Product is the resolver for the product field.
func (r *cartResolver) Product(ctx context.Context, obj *model.Cart) (*model.Product, error) {
	// panic(fmt.Errorf("not implemented: Product - product"))
	db:= database.GetDB();

	product := new(model.Product);

	return product, db.First(product, "id = ?", obj.ProductID).Error
}

// CreateCart is the resolver for the createCart field.
func (r *mutationResolver) CreateCart(ctx context.Context, input model.NewCart) (*model.Cart, error) {
	db := database.GetDB()
	if ctx.Value("auth") == nil {
		return nil, &gqlerror.Error{
			Message: "Invalid Token !",
		}
	}

	userID := ctx.Value("auth").(*service.JwtCustomClaim).ID

	cart, _ := service.CartGetByUserProduct(ctx, userID, input.ProductID)

	var product model.Product
	if err := db.Where("id = ?", input.ProductID).Limit(1).Find(&product).Error; err != nil {
		return nil, err
	}

	if input.Quantity > product.Stock {
		println(product.Stock)
		return nil, &gqlerror.Error{
			Message: "Invalid Purchased Product Stock!",
		}
	}
	if cart != nil {
		println(cart.Quantity)
		if cart.Quantity+input.Quantity > product.Stock {
			return nil, &gqlerror.Error{
				Message: "Invalid Purchased Product Stock!",
			}
		}
		cart.Quantity = cart.Quantity + input.Quantity
		cart.Notes = input.Notes

		return cart, db.Save(cart).Error
	}
	return service.CartCreate(ctx, userID, input.ProductID, input.Quantity, input.Notes)
}

// UpdateCart is the resolver for the updateCart field.
func (r *mutationResolver) UpdateCart(ctx context.Context, input model.NewCart) (*model.Cart, error) {
	// panic(fmt.Errorf("not implemented: UpdateCart - updateCart"))
	db := database.GetDB();
	if ctx.Value("auth") == nil {
		return nil, &gqlerror.Error{
			Message: "Invalid Token !",
		}
	}

	userID := ctx.Value("auth").(*service.JwtCustomClaim).ID

	var cart model.Cart
	if err := db.Model(cart).Where("product_id = ?", input.ProductID).Take(&cart).Error; err != nil {
		return nil, err
	}

	cart.UserID = userID
	cart.ProductID = input.ProductID
	cart.Quantity = input.Quantity
	cart.Notes = input.Notes

	return &cart, db.Save(cart).Error
}

// DeleteCart is the resolver for the deleteCart field.
func (r *mutationResolver) DeleteCart(ctx context.Context, productID string) (bool, error) {
	panic(fmt.Errorf("not implemented: DeleteCart - deleteCart"))
}

// CreateWishlist is the resolver for the createWishlist field.
func (r *mutationResolver) CreateWishlist(ctx context.Context, name string, option model.Option) (*model.Wishlist, error) {
	// panic(fmt.Errorf("not implemented: CreateWishlist - createWishlist"))
	db := database.GetDB()
	if ctx.Value("auth") == nil {
		return nil, &gqlerror.Error{
			Message: "Invalid Token !",
		}
	}

	userID := ctx.Value("auth").(*service.JwtCustomClaim).ID

	wishlist := model.Wishlist{
		ID:     uuid.NewString(),
		Name:   name,
		UserID: userID,
		Option: option,
	}

	if err := db.Model(wishlist).Create(&wishlist).Error; err != nil {
		return nil, err
	}

	return &wishlist, nil
}

// UpdateWishlist is the resolver for the updateWishlist field.
func (r *mutationResolver) UpdateWishlist(ctx context.Context, wishlistID string, name string, option string) (*model.Wishlist, error) {
	// panic(fmt.Errorf("not implemented: UpdateWishlist - updateWishlist"))
	db := database.GetDB();
	if ctx.Value("auth") == nil {
		return nil, &gqlerror.Error{
			Message: "Invalid Token !",
		}
	}

	var wishlist model.Wishlist
	if err := db.Model(wishlist).Where("id = ?", wishlistID).Take(&wishlist).Error; err != nil {
		return nil, err
	}

	wishlist.Name = name
	wishlist.Option = model.Option(option)

	return &wishlist, db.Save(wishlist).Error
}


// DeleteWishlist is the resolver for the deleteWishlist field.
func (r *mutationResolver) DeleteWishlist(ctx context.Context, wishlistID string) (bool, error) {
	panic(fmt.Errorf("not implemented: DeleteWishlist - deleteWishlist"))
}

// CreateWishlistDetail is the resolver for the createWishlistDetail field.
func (r *mutationResolver) CreateWishlistDetail(ctx context.Context, wishlistID string, productID string) (*model.WishListDetail, error) {
	// panic(fmt.Errorf("not implemented: CreateWishlistDetail - createWishlistDetail"))
	db := database.GetDB()

	if ctx.Value("auth") == nil {
		return nil, &gqlerror.Error{
			Message: "Invalid Token !",
		}
	}

	// userID := ctx.Value("auth").(*service.JwtCustomClaim).ID

	wishlist := &model.WishListDetail{
		WishlistID: wishlistID,
		ProductID:  productID,
	}

	return wishlist, db.Model(wishlist).Create(&wishlist).Error
}

// DeleteWishlistDetail is the resolver for the deleteWishlistDetail field.
func (r *mutationResolver) DeleteWishlistDetail(ctx context.Context, wishlistID string, productID string) (bool, error) {
	panic(fmt.Errorf("not implemented: DeleteWishlistDetail - deleteWishlistDetail"))
}

// CreateSaveForLater is the resolver for the createSaveForLater field.
func (r *mutationResolver) CreateSaveForLater(ctx context.Context, productID string) (*model.SaveForLater, error) {
	panic(fmt.Errorf("not implemented: CreateSaveForLater - createSaveForLater"))
}

// DeleteSaveForLater is the resolver for the deleteSaveForLater field.
func (r *mutationResolver) DeleteSaveForLater(ctx context.Context, productID string) (bool, error) {
	panic(fmt.Errorf("not implemented: DeleteSaveForLater - deleteSaveForLater"))
}

// Carts is the resolver for the carts field.
func (r *queryResolver) Carts(ctx context.Context) ([]*model.Cart, error) {
	// panic(fmt.Errorf("not implemented: Carts - carts"))
	db := database.GetDB()
	if ctx.Value("auth") == nil {
		return nil, &gqlerror.Error{
			Message: "Invalid Token !",
		}
	}

	userID := ctx.Value("auth").(*service.JwtCustomClaim).ID
	var models []*model.Cart

	return models, db.Where("user_id = ?", userID).Find(&models).Error

}

// Cart is the resolver for the cart field.
func (r *queryResolver) Cart(ctx context.Context, productID string) (*model.Cart, error) {
	panic(fmt.Errorf("not implemented: Cart - cart"))
}

// CurrentUserWishlist is the resolver for the currentUserWishlist field.
func (r *queryResolver) CurrentUserWishlist(ctx context.Context) ([]*model.Wishlist, error) {
	// panic(fmt.Errorf("not implemented: CurrentUserWishlist - currentUserWishlist"))
	db := database.GetDB()

	if ctx.Value("auth") == nil {
		return nil, &gqlerror.Error{
			Message: "Invalid Token !",
		}
	}

	userID := ctx.Value("auth").(*service.JwtCustomClaim).ID

	var wishlists []*model.Wishlist

	return wishlists, db.Where("user_id = ?", userID).Find(&wishlists).Error
}

// Wishlists is the resolver for the wishlists field.
func (r *queryResolver) Wishlists(ctx context.Context) ([]*model.Wishlist, error) {
	panic(fmt.Errorf("not implemented: Wishlists - wishlists"))
}

// Wishlist is the resolver for the wishlist field.
func (r *queryResolver) Wishlist(ctx context.Context, wishlistID string) (*model.Wishlist, error) {
	panic(fmt.Errorf("not implemented: Wishlist - wishlist"))
}

// SaveForLaters is the resolver for the saveForLaters field.
func (r *queryResolver) SaveForLaters(ctx context.Context) ([]*model.SaveForLater, error) {
	panic(fmt.Errorf("not implemented: SaveForLaters - saveForLaters"))
}

// WishlistDetails is the resolver for the wishlistDetails field.
func (r *queryResolver) WishlistDetails(ctx context.Context, wishlistID string) ([]*model.WishListDetail, error) {
	// panic(fmt.Errorf("not implemented: WishlistDetails - wishlistDetails"))
	db := database.GetDB()

	var models []*model.WishListDetail
	return models, db.Where("wishlist_id = ?", wishlistID).Find(&models).Error
}

// User is the resolver for the user field.
func (r *saveForLaterResolver) User(ctx context.Context, obj *model.SaveForLater) (*model.User, error) {
	panic(fmt.Errorf("not implemented: User - user"))
}

// Product is the resolver for the product field.
func (r *saveForLaterResolver) Product(ctx context.Context, obj *model.SaveForLater) (*model.Product, error) {
	panic(fmt.Errorf("not implemented: Product - product"))
}

// Wishlist is the resolver for the wishlist field.
func (r *wishListDetailResolver) Wishlist(ctx context.Context, obj *model.WishListDetail) (*model.Wishlist, error) {
	// panic(fmt.Errorf("not implemented: Wishlist - wishlist"))
	db := database.GetDB()

	wishlist := new(model.Wishlist)

	return wishlist, db.Where("id = ?", obj.WishlistID).Take(&wishlist).Error
}

// Product is the resolver for the product field.
func (r *wishListDetailResolver) Product(ctx context.Context, obj *model.WishListDetail) (*model.Product, error) {
	// panic(fmt.Errorf("not implemented: Product - product"))
	db := database.GetDB()

	product := new(model.Product)

	return product, db.Where("id = ?", obj.ProductID).Take(&product).Error
}

// User is the resolver for the user field.
func (r *wishlistResolver) User(ctx context.Context, obj *model.Wishlist) (*model.User, error) {
	panic(fmt.Errorf("not implemented: User - user"))
}

// WishlistDetails is the resolver for the wishlistDetails field.
func (r *wishlistResolver) WishlistDetails(ctx context.Context, obj *model.Wishlist) ([]*model.WishListDetail, error) {
	panic(fmt.Errorf("not implemented: WishlistDetails - wishlistDetails"))
}

// Cart returns CartResolver implementation.
func (r *Resolver) Cart() CartResolver { return &cartResolver{r} }

// SaveForLater returns SaveForLaterResolver implementation.
func (r *Resolver) SaveForLater() SaveForLaterResolver { return &saveForLaterResolver{r} }

// WishListDetail returns WishListDetailResolver implementation.
func (r *Resolver) WishListDetail() WishListDetailResolver { return &wishListDetailResolver{r} }

// Wishlist returns WishlistResolver implementation.
func (r *Resolver) Wishlist() WishlistResolver { return &wishlistResolver{r} }

type cartResolver struct{ *Resolver }
type saveForLaterResolver struct{ *Resolver }
type wishListDetailResolver struct{ *Resolver }
type wishlistResolver struct{ *Resolver }
