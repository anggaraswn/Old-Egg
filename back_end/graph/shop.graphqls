type Shop {
    id: ID!
    name: String!
    image: String
    banner: String
    followers: Int!
    salesCount: Int!
    policy: String
    aboutUs: String
    banned: Boolean!
    rating: Float!
    user: User! @goField(forceResolver: true)
    products: [Product!]! @goField(forceResolver: true)
}

input NewShop {
    name: String!
    image: String
    banner: String
    policy: String
    aboutUs: String
    userID: ID!
}

extend type Query {
    shops(limit: Int, offset: Int, filter: String): [Shop!]!
        @goField(forceResolver: true)
    shop(id: ID, userID: ID): Shop! @goField(forceResolver: true)
    topShop: [Shop!]! @goField(forceResolver: true)
    shopProducts(
        shopID: ID!
        sortBy: String
        categoryID: ID
        limit: Int
        offset: Int
    ): [Product!]!
    shopOrders(filter: String): [TransactionHeader!]! @auth
}

extend type Mutation {
    createShop(input: NewShop!): Shop!
    updateShop(aboutUs: String, shopName: String, image: String): Shop!
        @goField(forceResolver: true)
        @auth
    updateShopBanStatus(shopID: ID!, banned: Boolean!): Shop!
        @goField(forceResolver: true)
}
