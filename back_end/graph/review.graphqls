scalar Time

type Review {
    id: ID!
    user: User! @goField(forceResolver: true)
    product: Product! @goField(forceResolver: true)
    createdAt: Time!
    rating: Float!
    description: String!
}

input NewReview {
    productID: ID!
    rating: Float!
    description: String!
}

type ShopReview {
    id: ID!
    shop: Shop! @goField(forceResolver: true)
    user: User! @goField(forceResolver: true)
    transactionHeader: TransactionHeader! @goField(forceResolver: true)
    rating: Float!
    review: String!
    reviewDetails: String!
    createdAt: Time!
    deliveryOnTime: Boolean!
    productAccuracy: Boolean!
    serviceSatisfaction: Boolean!
    helpful: Boolean!
}

type WishlistReview {
    id: ID!
    wishlist: Wishlist! @goField(forceResolver: true)
    user: User! @goField(forceResolver: true)
    rating: Float!
    review: String!
    detailReview: String!
    name: String!
}

extend type Query {
    reviews: [Review!]! @auth
    shopReviews(shopID: ID!, search: String, filter: String): [ShopReview!]!
    wishlistReviews(wishlistID: ID!): [WishlistReview!]!
}

extend type Mutation {
    createReview(input: NewReview!): Review! @auth
    createWishlistReview(
        wishlistID: ID!
        rating: Float!
        review: String!
        detailReview: String!
        name: String
    ): WishlistReview! @auth
    deleteReview(reviewID: ID!): Review! @auth
    updateReview(reviewID: ID!, rating: Float!, description: String!): Review!
        @auth
}
