package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.24

import (
	"context"
	"fmt"

	"github.com/anggaraswn/gqlgen-todos/database"
	"github.com/anggaraswn/gqlgen-todos/graph/model"
	"github.com/google/uuid"
	"github.com/vektah/gqlparser/v2/gqlerror"
)

// CreateShop is the resolver for the createShop field.
func (r *mutationResolver) CreateShop(ctx context.Context, input model.NewShop) (*model.Shop, error) {
	// panic(fmt.Errorf("not implemented: CreateShop - createShop"))
	db := database.GetDB()

	shop := new(model.Shop)
	if err := db.Where("name = ?", input.Name).Take(&shop).Error; err != nil {
		shop = nil
	}

	if shop != nil {
		return nil, &gqlerror.Error{
			Message: "Name already taken!",
		}
	}

	shop = &model.Shop{
		ID:         uuid.NewString(),
		Name:       input.Name,
		Image:      input.Image,
		Banner:     input.Banner,
		Followers:  0,
		SalesCount: 0,
		Policy:     input.Policy,
		AboutUs:    input.AboutUs,
		Banned:     false,
		UserID:     input.UserID,
		Rating:     0,
	}

	return shop, db.Model(shop).Create(&shop).Error
}

// UpdateShop is the resolver for the updateShop field.
func (r *mutationResolver) UpdateShop(ctx context.Context, input model.NewShop) (*model.Shop, error) {
	panic(fmt.Errorf("not implemented: UpdateShop - updateShop"))
}

// Shops is the resolver for the Shops field.
func (r *queryResolver) Shops(ctx context.Context) ([]*model.Shop, error) {
	// panic(fmt.Errorf("not implemented: Shops - Shops"))
	db := database.GetDB()

	var shops []*model.Shop

	return shops, db.Find(&shops).Error
}

// Shop is the resolver for the Shop field.
func (r *queryResolver) Shop(ctx context.Context, id string) (*model.Shop, error) {
	// panic(fmt.Errorf("not implemented: Shop - Shop"))
	db := database.GetDB()

	shop := new(model.Shop)

	return shop, db.First(shop, "id = ?", id).Error
}

// TopShop is the resolver for the topShop field.
func (r *queryResolver) TopShop(ctx context.Context) ([]*model.Shop, error) {
	// panic(fmt.Errorf("not implemented: TopShop - topShop"))
	db := database.GetDB()

	var shops []*model.Shop

	return shops, db.Model(shops).Select("s.id, s.name, s.image, s.banner, s.followers, s.sales_count, s.policy, s.about_us, s.banned, s.user_id, COUNT(th.id) AS totalTransaction FROM shops AS s JOIN products AS p ON s.id = p.shop_id JOIN transaction_details AS td ON td.product_id = p.id JOIN transaction_headers AS th ON th.id = td.transaction_header_id WHERE s.banned = false GROUP BY s.id ORDER BY totalTransaction DESC ").Limit(3).Find(&shops).Error
}

// ShopProducts is the resolver for the shopProducts field.
func (r *queryResolver) ShopProducts(ctx context.Context, shopID string, sortBy *string, categoryID *string) ([]*model.Product, error) {
	// panic(fmt.Errorf("not implemented: ShopProducts - shopProducts"))
	db := database.GetDB()

	var products []*model.Product

	p := db.Model(products).Where("shop_id = ?")

	if sortBy != nil {
		if *sortBy == "topSold" {
			p = db.Model(products).Select("p.id, p.name, p.images, p.price, p.discount, p.rating, p.stock, p.description, p.number_of_reviews, p.number_bought, p.number_of_ratings, p.category_id, p.shop_id, p.brand_id, SUM(td.quantity) AS totalQuantitySold FROM products AS p JOIN transaction_details AS td ON td.product_id = p.id WHERE p.shop_id = ? GROUP BY p.id ORDER BY totalQuantitySold DESC", shopID)
		} else if *sortBy == "topRating" {
			p = p.Order("rating DESC")
		}
	}

	if categoryID != nil {
		p = p.Where("category_id = ?", categoryID)
	}

	return products, p.Find(&products).Error
}

// ShopOrders is the resolver for the shopOrders field.
func (r *queryResolver) ShopOrders(ctx context.Context, shopID string, filter *string) ([]*model.TransactionHeader, error) {
	// panic(fmt.Errorf("not implemented: ShopOrders - shopOrders"))
	db := database.GetDB()

	var shopOrders []*model.TransactionHeader

	s := db.Model(shopOrders).Joins("transaction_details ON transaction_headers.id = transaction_details.transaction_header_id JOIN products ON transaction_details.product_id = products.id").Where("products.shop = ?", shopID)

	if filter != nil && *filter != "All" {
		s = s.Where("transaction_headers.status = ?", filter)
	}

	return shopOrders, s.Find(&shopOrders).Error
}

// User is the resolver for the user field.
func (r *shopResolver) User(ctx context.Context, obj *model.Shop) (*model.User, error) {
	// panic(fmt.Errorf("not implemented: User - user"))
	db := database.GetDB()

	user := new(model.User)

	return user, db.Where("id = ?", obj.UserID).Take(&user).Error
}

// Products is the resolver for the products field.
func (r *shopResolver) Products(ctx context.Context, obj *model.Shop) ([]*model.Product, error) {
	panic(fmt.Errorf("not implemented: Products - products"))
}

// Shop returns ShopResolver implementation.
func (r *Resolver) Shop() ShopResolver { return &shopResolver{r} }

type shopResolver struct{ *Resolver }
