package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.24

import (
	"context"
	"fmt"

	"github.com/anggaraswn/gqlgen-todos/database"
	"github.com/anggaraswn/gqlgen-todos/graph/model"
	"github.com/google/uuid"
	"github.com/vektah/gqlparser/v2/gqlerror"
)

// CreateShop is the resolver for the createShop field.
func (r *mutationResolver) CreateShop(ctx context.Context, input model.NewShop) (*model.Shop, error) {
	// panic(fmt.Errorf("not implemented: CreateShop - createShop"))
	db := database.GetDB()

	shop := new(model.Shop)
	if err := db.Where("name = ?", input.Name).Take(&shop).Error; err != nil {
		shop = nil
	}

	if shop != nil {
		return nil, &gqlerror.Error{
			Message: "Name already taken!",
		}
	}

	shop = &model.Shop{
		ID:         uuid.NewString(),
		Name:       input.Name,
		Image:      input.Image,
		Banner:     input.Banner,
		Followers:  0,
		SalesCount: 0,
		Policy:     input.Policy,
		AboutUs:    input.AboutUs,
		Banned:     false,
		UserID:     input.UserID,
	}

	return shop, db.Model(shop).Create(&shop).Error
}

// UpdateShop is the resolver for the updateShop field.
func (r *mutationResolver) UpdateShop(ctx context.Context, input model.NewShop) (*model.Shop, error) {
	panic(fmt.Errorf("not implemented: UpdateShop - updateShop"))
}

// Shops is the resolver for the Shops field.
func (r *queryResolver) Shops(ctx context.Context) ([]*model.Shop, error) {
	// panic(fmt.Errorf("not implemented: Shops - Shops"))
	db := database.GetDB()

	var shops []*model.Shop

	return shops, db.Find(&shops).Error
}

// Shop is the resolver for the Shop field.
func (r *queryResolver) Shop(ctx context.Context, id string) (*model.Shop, error) {
	// panic(fmt.Errorf("not implemented: Shop - Shop"))
	db := database.GetDB()

	shop := new(model.Shop)

	return shop, db.First(shop, "id = ?", id).Error
}

// User is the resolver for the user field.
func (r *shopResolver) User(ctx context.Context, obj *model.Shop) (*model.User, error) {
	// panic(fmt.Errorf("not implemented: User - user"))
	db := database.GetDB()

	user := new(model.User)

	return user, db.Where("id = ?", obj.UserID).Take(&user).Error
}

// Products is the resolver for the products field.
func (r *shopResolver) Products(ctx context.Context, obj *model.Shop) ([]*model.Product, error) {
	panic(fmt.Errorf("not implemented: Products - products"))
}

// Shop returns ShopResolver implementation.
func (r *Resolver) Shop() ShopResolver { return &shopResolver{r} }

type shopResolver struct{ *Resolver }
